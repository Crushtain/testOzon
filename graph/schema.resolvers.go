package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"

	"github.com/Crushtain/testOzon/graph/model"
)

// CreatePublication is the resolver for the createPublication field.
func (r *mutationResolver) CreatePublication(ctx context.Context, title string, content string, commentsDisabled bool) (*model.Publication, error) {
	publication := &model.Publication{
		ID:               uuid.NewString(),
		Title:            title,
		Content:          content,
		CommentsDisabled: commentsDisabled,
	}
	if err := r.Storage.CreatePublication(publication); err != nil {
		return nil, err
	}
	return publication, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, author string, publicationID string, parentID *string, content string) (*model.Comment, error) {
	enabled, err := r.Storage.IsDisableComment(publicationID)
	if err != nil {
		return nil, err
	}
	if enabled == true {
		return nil, errors.New("Commets are disabled")
	}
	if len(content) > 2000 {
		return nil, errors.New("Comment should be less than 2000 symbols")
	}
	comment := &model.Comment{
		ID:            uuid.NewString(),
		PublicationID: publicationID,
		Author:        author,
		Content:       content,
		ParentID:      parentID,
	}

	if err = r.Storage.CreateComment(comment); err != nil {
		return nil, err
	}

	r.Mu.Lock()
	defer r.Mu.Unlock()
	subscribers := r.Comments[publicationID]
	for _, subscriber := range subscribers {
		subscriber <- comment
	}
	return comment, nil
}

// Publications is the resolver for the publications field.
func (r *queryResolver) Publications(ctx context.Context) ([]*model.Publication, error) {
	return r.Storage.GetAllPublications()
}

// Publication is the resolver for the publication field.
func (r *queryResolver) Publication(ctx context.Context, id string) (*model.Publication, error) {
	post, err := r.Storage.GetPublicationByID(id)
	if err != nil {
		return nil, err
	}

	return post, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, publicationID string, limit *int, offset *int) ([]*model.Comment, error) {
	if limit == nil || offset == nil {
		log.Printf("WARN:%v", errors.New("limit or offset can't be nil"))
		return []*model.Comment{}, nil
	}
	comments, err := r.Storage.CommentsByPublicationID(publicationID, limit, offset)
	if err != nil {
		return nil, err
	}

	return comments, nil
}

// CommentNotification is the resolver for the commentNotification field.
func (r *subscriptionResolver) CommentNotification(ctx context.Context, publicationID string) (<-chan *model.Comment, error) {
	commentChan := make(chan *model.Comment, 1)

	r.Mu.Lock()
	defer r.Mu.Unlock()

	r.Comments[publicationID] = append(r.Comments[publicationID], commentChan)

	go func() {
		<-ctx.Done()
		r.Mu.Lock()
		defer r.Mu.Unlock()
		observers := r.Comments[publicationID]
		for i, observer := range observers {
			if observer == commentChan {
				r.Comments[publicationID] = append(observers[:i], observers[i+1:]...)
				break
			}
		}
	}()
	return commentChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) DisableComments(ctx context.Context, publicationID string) (*model.Publication, error) {
	panic(fmt.Errorf("not implemented: DisableComments - disableComments"))
}
func (r *subscriptionResolver) CommentAdded(ctx context.Context, publicationID string) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}
